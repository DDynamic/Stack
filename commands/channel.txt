msg.delete();

if (msg.author.bot || msg.member.hasPermission('MANAGE_CHANNELS')) {
    switch (args[0]) {
        case 'export':
            var channel_mention;
            if (msg.mentions.channels.first()) {
                var channel_mention = msg.mentions.channels.first();
            } else {
                var channel_mention = msg.channel;
            }

            var messages = [];

            function getMessages(before) {
                msg.channel.fetchMessages({
                    limit: 100,
                    before: (before || 0)
                }).then(function(message_batch) {
                    messages.push(message_batch.array());

                    if (message_batch.size == 100) {
                        getMessages(message_batch.array().pop().id);
                    } else {
                        var file_path = '/tmp/' + Math.random().toString(36).substring(7) + '.txt';

                        var contents = [].concat.apply([], messages).map(function(message) {
                            return (new Date(message.createdTimestamp)) + ' | ' + message.member.displayName + ': ' + message.content
                        });

                        fs.writeFile(file_path, contents.reverse().join('\n'), function(err) {
                            var file_name = 'export-' + msg.channel.name + '.txt';

                            channel_mention.send(file_name, {
                                files: [{
                                    attachment: file_path,
                                    name: file_name
                                }]
                            }).then(function() {
                                fs.unlink(file_path, function() {});
                            }).then(function() {
                              	if (msg.channel != channel_mention) {
                                  	msg.reply('channel export complete.');
                                }
                            });
                        });
                    }
                })
            }

            getMessages();

            break;
        case 'scrub':
            if (args[1] && args[1] <= 100) {
                msg.channel.bulkDelete(args[1], true);
            } else {
                msg.channel.bulkDelete(100, true);
            }

            break;
        case 'private':
            msg.channel.permissionOverwrites.deleteAll();

            msg.channel.overwritePermissions(msg.channel.guild.defaultRole.id, {
                READ_MESSAGES: false
            });

            msg.channel.overwritePermissions(msg.member, {
                VIEW_CHANNEL: true
            });

            msg.channel.send({
                embed: {
                    color: 14277081,
                    title: 'Private',
                    description: 'This channel has been made private. \n\n Run `' + (process.env.PREFIX || 's!') + ' channel reset` if you would like to reset channel permissions entirely.'
                }
            });

            break;
        case 'reset':
            msg.channel.permissionOverwrites.deleteAll();
            msg.channel.send({
                embed: {
                    color: 14277081,
                    title: 'Reset',
                    description: 'This channel\'s permissions have been reset. **Anyone can access this channel.** \n\n Run `' + (process.env.PREFIX || 's!') + ' channel private` if you would like to make this channel exclusive.'
                }
            });
            break;
        case 'invite':
            args.shift();
            var invitations = '';

            var i;
            for (i = 0; i < args.length; i++) {
                var query = args[i];

                msg.guild.members.find(function(user) {
                    var display_name = user.displayName.toUpperCase();

                    if (display_name.includes(query.toUpperCase())) {
                        msg.channel.overwritePermissions(user, {
                            READ_MESSAGES: true
                        });
                        invitations += '<@' + user.id + '> ';
                    }
                });
            }

            if (!invitations) {
                invitations = 'No users were invited.';
            } else {
                invitations = invitations + 'joined.';
            }

            msg.channel.send({
                embed: {
                    color: 14277081,
                    title: 'Joined',
                    description: invitations
                }
            });

            break;
        case 'remove':
            args.shift();
            var removals = '';

            for (i = 0; i < args.length; i++) {
                var query = args[i];

                msg.guild.members.find(function(user) {
                    var display_name = user.displayName.toUpperCase();

                    if (display_name.includes(query.toUpperCase())) {
                        msg.channel.permissionOverwrites.get(user.id).delete();
                        removals += '<@' + user.id + '> ';
                    }
                });
            }

            if (!removals) {
                removals = 'No users were removed.';
            } else {
                removals = removals + 'left.';
            }

            msg.channel.send({
                embed: {
                    color: 14277081,
                    title: 'Left',
                    description: removals
                }
            });
            break;
        case 'list':
            var array = msg.channel.members.filter(function(element) {
                return !element.user.bot;
            });

            array = array.map(function(element) {
                if (args[1] == 'ids') {
                    return element.id;
                } else {
                    return element.displayName;
                }
            });

            for (var i = 0; i < array.length; i++) {
                if (i === 0) {
                    msg.author.send('**List from #' + msg.channel.name + ':**');
                }

                if (i % 10 === 0) {
                    msg.author.send({
                        embed: {
                            color: 14277081,
                            description: array.slice(i, i + 10).join('\n')
                        }
                    });
                }
            }

            break;
        default:
            msg.reply('invalid subcommand! Refer to command help by running: `' + (process.env.PREFIX || 's!') + ' help`');
    }
} else {
    msg.reply('you must have the **Manage Channels** permission to run this command.');
}
