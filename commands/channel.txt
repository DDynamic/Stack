msg.delete();
    
var access = false;

if (msg.member) {
	msg.member.hasPermission('MANAGE_CHANNELS') ? access = true: access = false; 
} else if(msg.author.bot) {
	access = true;
}

if (access) {
	switch(args[0]) {
		case 'scrub':
			if (args[1] && args[1] <= 100) {
				msg.channel.bulkDelete(args[1], true);
			} else {
				msg.channel.bulkDelete(100, true);
			}

			break;
		case 'private':
			msg.channel.overwritePermissions(msg.channel.guild.defaultRole.id, {
				READ_MESSAGES: false
			});
			msg.channel.permissionOverwrites.deleteAll();
			msg.channel.send({embed: {
				color: 14277081,
				title: 'Privatized',
				description: 'This channel has been privatized. Overridden permissions have remained intact. **@everyone cannot view this channel.** \n\n Run `' + (process.env.PREFIX || 's!') + ' channel reset` if you would like to reset channel permissions entirely.'
			  }
			});
			break;
		case 'reset':
			msg.channel.permissionOverwrites.deleteAll();
			msg.channel.send({embed: {
				color: 14277081,
				title: 'Reset',
				description: 'This channel\'s permissions have been reset. **Anyone can access this channel.** \n\n Run `' + (process.env.PREFIX || 's!') + ' channel private` if you would like to make this channel exclusive.'
				 }
			});
			break;
		case 'invite':
			args.shift();
			var invitations = '';

			var i;
			for (i = 0; i < args.length; i++) {
				var query = args[i];

				client.users.find(function(user) {
					var username = user.username.toUpperCase();

					if (username.includes(query.toUpperCase())) {
						msg.channel.overwritePermissions(user, {
							READ_MESSAGES: true
						});
						invitations += '<@' + user.id + '> ';
					}
				});
			}

			if (!invitations) {
				invitations = 'No users were invited.';
			} else {
				invitations = invitations + 'joined.';
			}

			msg.channel.send({embed: {
				color: 14277081,
				title: 'Joined',
				description: invitations
			  }
			});

			break;
		case 'remove':
			args.shift();
			var removals = '';

			for (i = 0; i < args.length; i++) {
				var query = args[i];

				client.users.find(function(user) {
					var username = user.username.toUpperCase();

					if (username.includes(query.toUpperCase())) {
						msg.channel.permissionOverwrites.get(user.id).delete();
						removals += '<@' + user.id + '> ';
					}
				});
			}

			if (!removals) {
				removals = 'No users were removed.';
			} else {
				removals = removals + 'left.';
			}

			msg.channel.send({embed: {
				color: 14277081,
				title: 'Left',
				description: removals
			  }
			});
			break;
        case 'members':
        	var ids = msg.channel.members.map(function(member) {
            	if (!member.user.bot) {
                	return member.id;
                }
            });
            
            var names = msg.channel.members.map(function(member) {
            	if (!member.user.bot) {
                	return member.displayName;
                }
            });
            
        	msg.channel.send({embed: {
				color: 14277081,
                fields: [
                	{
                    	name: 'Member',
                        value: names.filter(Boolean).join('\n'),
                        inline: true
                    },
                    {
                    	name: 'ID',
                        value: ids.filter(Boolean).join('\n'),
                        inline: true
                    }
                ]
			  }
			});
        	break;
		default:
			msg.reply('invalid subcommand! Refer to command help by running: `'+ (process.env.PREFIX || 's!') + ' help`');
	}   
} else {
	msg.reply('you must have the **Manage Channels** permission to run this command.');
}